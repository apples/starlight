[gd_scene load_steps=2 format=3 uid="uid://cs5dldvvdqvc5"]

[sub_resource type="GDScript" id="GDScript_mjvjm"]
script/source = "extends Control


@export var text: String = \"\"
@export var font: Font = null
@export var font_size: int = 12

var _text_rid: RID
var _lines_rid: Array[RID] = []

var TS: TextServer:
	get: return TextServerManager.get_primary_interface()

func _ready() -> void:
	if not font:
		font = get_theme_font(\"font\", \"Label\")

func get_line_height(p_line: int) -> int:
	if p_line >= 0 and p_line < _lines_rid.size():
		return TS.shaped_text_get_size(_lines_rid[p_line]).y
	elif _lines_rid.size() > 0:
		var h := 0
		for rid: RID in _lines_rid:
			h = maxi(h, TS.shaped_text_get_size(rid).y)
		return h
	else:
		return font.get_height(font_size)


func _shape() -> void:
	var style: StyleBox = get_theme_stylebox(\"normal\", \"Label\")
	
	var width: int = size.x - style.get_minimum_size().x
	
	if dirty or font_dirty:
		if dirty:
			TS->shaped_text_clear(text_rid);
		}
		if (text_direction == Control::TEXT_DIRECTION_INHERITED) {
			TS->shaped_text_set_direction(text_rid, is_layout_rtl() ? TextServer::DIRECTION_RTL : TextServer::DIRECTION_LTR);
		} else {
			TS->shaped_text_set_direction(text_rid, (TextServer::Direction)text_direction);
		}
		const Ref<Font> &font = (settings.is_valid() && settings->get_font().is_valid()) ? settings->get_font() : theme_cache.font;
		int font_size = settings.is_valid() ? settings->get_font_size() : theme_cache.font_size;
		ERR_FAIL_COND(font.is_null());
		String txt = (uppercase) ? TS->string_to_upper(xl_text, language) : xl_text;
		if (visible_chars >= 0 && visible_chars_behavior == TextServer::VC_CHARS_BEFORE_SHAPING) {
			txt = txt.substr(0, visible_chars);
		}
		if (dirty) {
			TS->shaped_text_add_string(text_rid, txt, font->get_rids(), font_size, font->get_opentype_features(), language);
		} else {
			int spans = TS->shaped_get_span_count(text_rid);
			for (int i = 0; i < spans; i++) {
				TS->shaped_set_span_update_font(text_rid, i, font->get_rids(), font_size, font->get_opentype_features());
			}
		}
		TS->shaped_text_set_bidi_override(text_rid, structured_text_parser(st_parser, st_args, txt));
		if (!tab_stops.is_empty()) {
			TS->shaped_text_tab_align(text_rid, tab_stops);
		}
		dirty = false;
		font_dirty = false;
		lines_dirty = true;
	}

	if (lines_dirty) {
		for (int i = 0; i < lines_rid.size(); i++) {
			TS->free_rid(lines_rid[i]);
		}
		lines_rid.clear();

		BitField<TextServer::LineBreakFlag> autowrap_flags = TextServer::BREAK_MANDATORY;
		switch (autowrap_mode) {
			case TextServer::AUTOWRAP_WORD_SMART:
				autowrap_flags = TextServer::BREAK_WORD_BOUND | TextServer::BREAK_ADAPTIVE | TextServer::BREAK_MANDATORY;
				break;
			case TextServer::AUTOWRAP_WORD:
				autowrap_flags = TextServer::BREAK_WORD_BOUND | TextServer::BREAK_MANDATORY;
				break;
			case TextServer::AUTOWRAP_ARBITRARY:
				autowrap_flags = TextServer::BREAK_GRAPHEME_BOUND | TextServer::BREAK_MANDATORY;
				break;
			case TextServer::AUTOWRAP_OFF:
				break;
		}
		autowrap_flags = autowrap_flags | TextServer::BREAK_TRIM_EDGE_SPACES;

		PackedInt32Array line_breaks = TS->shaped_text_get_line_breaks(text_rid, width, 0, autowrap_flags);
		for (int i = 0; i < line_breaks.size(); i = i + 2) {
			RID line = TS->shaped_text_substr(text_rid, line_breaks[i], line_breaks[i + 1] - line_breaks[i]);
			if (!tab_stops.is_empty()) {
				TS->shaped_text_tab_align(line, tab_stops);
			}
			lines_rid.push_back(line);
		}
	}

	if (xl_text.length() == 0) {
		minsize = Size2(1, get_line_height());
		return;
	}

	if (autowrap_mode == TextServer::AUTOWRAP_OFF) {
		minsize.width = 0.0f;
		for (int i = 0; i < lines_rid.size(); i++) {
			if (minsize.width < TS->shaped_text_get_size(lines_rid[i]).x) {
				minsize.width = TS->shaped_text_get_size(lines_rid[i]).x;
			}
		}
	}

	if (lines_dirty) {
		BitField<TextServer::TextOverrunFlag> overrun_flags = TextServer::OVERRUN_NO_TRIM;
		switch (overrun_behavior) {
			case TextServer::OVERRUN_TRIM_WORD_ELLIPSIS:
				overrun_flags.set_flag(TextServer::OVERRUN_TRIM);
				overrun_flags.set_flag(TextServer::OVERRUN_TRIM_WORD_ONLY);
				overrun_flags.set_flag(TextServer::OVERRUN_ADD_ELLIPSIS);
				break;
			case TextServer::OVERRUN_TRIM_ELLIPSIS:
				overrun_flags.set_flag(TextServer::OVERRUN_TRIM);
				overrun_flags.set_flag(TextServer::OVERRUN_ADD_ELLIPSIS);
				break;
			case TextServer::OVERRUN_TRIM_WORD:
				overrun_flags.set_flag(TextServer::OVERRUN_TRIM);
				overrun_flags.set_flag(TextServer::OVERRUN_TRIM_WORD_ONLY);
				break;
			case TextServer::OVERRUN_TRIM_CHAR:
				overrun_flags.set_flag(TextServer::OVERRUN_TRIM);
				break;
			case TextServer::OVERRUN_NO_TRIMMING:
				break;
		}

		// Fill after min_size calculation.

		BitField<TextServer::JustificationFlag> line_jst_flags = jst_flags;
		if (!tab_stops.is_empty()) {
			line_jst_flags.set_flag(TextServer::JUSTIFICATION_AFTER_LAST_TAB);
		}
		if (autowrap_mode != TextServer::AUTOWRAP_OFF) {
			int visible_lines = get_visible_line_count();
			bool lines_hidden = visible_lines > 0 && visible_lines < lines_rid.size();
			if (lines_hidden) {
				overrun_flags.set_flag(TextServer::OVERRUN_ENFORCE_ELLIPSIS);
			}
			if (horizontal_alignment == HORIZONTAL_ALIGNMENT_FILL) {
				int jst_to_line = visible_lines;
				if (lines_rid.size() == 1 && line_jst_flags.has_flag(TextServer::JUSTIFICATION_DO_NOT_SKIP_SINGLE_LINE)) {
					jst_to_line = lines_rid.size();
				} else {
					if (line_jst_flags.has_flag(TextServer::JUSTIFICATION_SKIP_LAST_LINE)) {
						jst_to_line = visible_lines - 1;
					}
					if (line_jst_flags.has_flag(TextServer::JUSTIFICATION_SKIP_LAST_LINE_WITH_VISIBLE_CHARS)) {
						for (int i = visible_lines - 1; i >= 0; i--) {
							if (TS->shaped_text_has_visible_chars(lines_rid[i])) {
								jst_to_line = i;
								break;
							}
						}
					}
				}
				for (int i = 0; i < lines_rid.size(); i++) {
					if (i < jst_to_line) {
						TS->shaped_text_fit_to_width(lines_rid[i], width, line_jst_flags);
					} else if (i == (visible_lines - 1)) {
						TS->shaped_text_set_custom_ellipsis(lines_rid[i], (el_char.length() > 0) ? el_char[0] : 0x2026);
						TS->shaped_text_overrun_trim_to_width(lines_rid[i], width, overrun_flags);
					}
				}
			} else if (lines_hidden) {
				TS->shaped_text_set_custom_ellipsis(lines_rid[visible_lines - 1], (el_char.length() > 0) ? el_char[0] : 0x2026);
				TS->shaped_text_overrun_trim_to_width(lines_rid[visible_lines - 1], width, overrun_flags);
			}
		} else {
			// Autowrap disabled.
			int jst_to_line = lines_rid.size();
			if (lines_rid.size() == 1 && line_jst_flags.has_flag(TextServer::JUSTIFICATION_DO_NOT_SKIP_SINGLE_LINE)) {
				jst_to_line = lines_rid.size();
			} else {
				if (line_jst_flags.has_flag(TextServer::JUSTIFICATION_SKIP_LAST_LINE)) {
					jst_to_line = lines_rid.size() - 1;
				}
				if (line_jst_flags.has_flag(TextServer::JUSTIFICATION_SKIP_LAST_LINE_WITH_VISIBLE_CHARS)) {
					for (int i = lines_rid.size() - 1; i >= 0; i--) {
						if (TS->shaped_text_has_visible_chars(lines_rid[i])) {
							jst_to_line = i;
							break;
						}
					}
				}
			}
			for (int i = 0; i < lines_rid.size(); i++) {
				if (i < jst_to_line && horizontal_alignment == HORIZONTAL_ALIGNMENT_FILL) {
					TS->shaped_text_fit_to_width(lines_rid[i], width, line_jst_flags);
					overrun_flags.set_flag(TextServer::OVERRUN_JUSTIFICATION_AWARE);
					TS->shaped_text_set_custom_ellipsis(lines_rid[i], (el_char.length() > 0) ? el_char[0] : 0x2026);
					TS->shaped_text_overrun_trim_to_width(lines_rid[i], width, overrun_flags);
					TS->shaped_text_fit_to_width(lines_rid[i], width, line_jst_flags | TextServer::JUSTIFICATION_CONSTRAIN_ELLIPSIS);
				} else {
					TS->shaped_text_set_custom_ellipsis(lines_rid[i], (el_char.length() > 0) ? el_char[0] : 0x2026);
					TS->shaped_text_overrun_trim_to_width(lines_rid[i], width, overrun_flags);
				}
			}
		}
		lines_dirty = false;
	}

	_update_visible();

	if (autowrap_mode == TextServer::AUTOWRAP_OFF || !clip || overrun_behavior == TextServer::OVERRUN_NO_TRIMMING) {
		update_minimum_size();
	}
}
"

[node name="Node2D" type="Node2D"]

[node name="Control" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0
script = SubResource("GDScript_mjvjm")
text = null
font_size = null
